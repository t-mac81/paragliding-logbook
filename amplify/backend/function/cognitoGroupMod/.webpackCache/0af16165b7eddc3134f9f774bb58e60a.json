{"remainingRequest":"/Users/owen.shoemaker/Repos/logbook/amplify/backend/function/cognitoGroupMod/node_modules/babel-loader/lib/index.js!/Users/owen.shoemaker/Repos/logbook/amplify/backend/function/cognitoGroupMod/src/index.ts","dependencies":[{"path":"/Users/owen.shoemaker/Repos/logbook/amplify/backend/function/cognitoGroupMod/src/index.ts","mtime":1657323110427},{"path":"/Users/owen.shoemaker/Repos/logbook/amplify/backend/function/cognitoGroupMod/.babelrc","mtime":1657299659528},{"path":"/Users/owen.shoemaker/Repos/logbook/node_modules/cache-loader/dist/cjs.js","mtime":1657300748410},{"path":"/Users/owen.shoemaker/Repos/logbook/amplify/backend/function/cognitoGroupMod/node_modules/babel-loader/lib/index.js","mtime":1657302281005}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCi8qIEFtcGxpZnkgUGFyYW1zIC0gRE8gTk9UIEVESVQKCUFVVEhfTE9HQk9PS0Q3MzQ2NjQxX1VTRVJQT09MSUQKCUVOVgoJUkVHSU9OCkFtcGxpZnkgUGFyYW1zIC0gRE8gTk9UIEVESVQgKi8KCi8qKgogKiBAdHlwZSB7aW1wb3J0KCdAdHlwZXMvYXdzLWxhbWJkYScpLkFQSUdhdGV3YXlQcm94eUhhbmRsZXJ9CiAqLwppbXBvcnQgeyBDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICdhd3Mtc2RrJzsKdmFyIGNvZ25pdG9TUCA9IG5ldyBDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIoKTsKCmV4cG9ydHMuaGFuZGxlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZXZlbnQpIHsKICAgIHZhciBmaWVsZE5hbWUsIHJlc3BvbnNlOwogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29uc29sZS5sb2coIkVWRU5UOiAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShldmVudCkpKTsKICAgICAgICAgICAgZmllbGROYW1lID0gZXZlbnQuZmllbGROYW1lOwogICAgICAgICAgICByZXNwb25zZSA9IHt9OwogICAgICAgICAgICBfY29udGV4dC50MCA9IGZpZWxkTmFtZTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IF9jb250ZXh0LnQwID09PSAiYWRkVXNlclRvR3JvdXAiID8gNiA6IF9jb250ZXh0LnQwID09PSAicmVtb3ZlVXNlckZyb21Hcm91cCIgPyAxMCA6IDE0OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gYWRkVXNlclRvR3JvdXAoZXZlbnQpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJicmVhayIsIDE1KTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgIHJldHVybiByZW1vdmVVc2VyRnJvbUdyb3VwKGV2ZW50KTsKCiAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoImJyZWFrIiwgMTUpOwoKICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsCiAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgICAgICAgICAgICBlcnJvcjogIlVua293biBhY3Rpb24iLAogICAgICAgICAgICAgICAgZXJyb3JNc2c6ICJUaGUgYWN0aW9uOiAiICsgZmllbGROYW1lICsgIiBpcyB1bmtvd24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIHJlbW92ZVVzZXJGcm9tR3JvdXAgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZXZlbnQpIHsKICAgIHZhciBfZXZlbnQkYXJndW1lbnRzJGlucHUsIHVzZXIsIGdyb3VwLCBBVVRIX0xPR0JPT0tENzM0NjY0MV9VU0VSUE9PTElELCBwYXJhbXM7CgogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgX2V2ZW50JGFyZ3VtZW50cyRpbnB1ID0gZXZlbnQuYXJndW1lbnRzLmlucHV0LCB1c2VyID0gX2V2ZW50JGFyZ3VtZW50cyRpbnB1LnVzZXIsIGdyb3VwID0gX2V2ZW50JGFyZ3VtZW50cyRpbnB1Lmdyb3VwOwogICAgICAgICAgICBBVVRIX0xPR0JPT0tENzM0NjY0MV9VU0VSUE9PTElEID0gcHJvY2Vzcy5lbnYuQVVUSF9MT0dCT09LRDczNDY2NDFfVVNFUlBPT0xJRDsKICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgIFVzZXJuYW1lOiB1c2VyLAogICAgICAgICAgICAgIEdyb3VwTmFtZTogZ3JvdXAsCiAgICAgICAgICAgICAgVXNlclBvb2xJZDogQVVUSF9MT0dCT09LRDczNDY2NDFfVVNFUlBPT0xJRAogICAgICAgICAgICB9OwogICAgICAgICAgICBjb25zb2xlLmxvZygnYWRkVXNlclRvR3JvdXAgcGFyYW1zOiAnLCBwYXJhbXMpOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgIHJldHVybiBjb2duaXRvU1AuYWRtaW5SZW1vdmVVc2VyRnJvbUdyb3VwKHBhcmFtcyk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCwKICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwOwogICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLAogICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLAogICAgICAgICAgICAgICAgZXJyb3I6ICdDb3VsZCBub3QgYWRkIHVzZXIgdG8gZ3JvdXAnLAogICAgICAgICAgICAgICAgZXJyb3JNc2c6IF9jb250ZXh0Mi50MAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgMTBdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlVXNlckZyb21Hcm91cChfeDIpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBhZGRVc2VyVG9Hcm91cCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhldmVudCkgewogICAgdmFyIF9ldmVudCRhcmd1bWVudHMkaW5wdTIsIHVzZXIsIGdyb3VwLCBBVVRIX0xPR0JPT0tENzM0NjY0MV9VU0VSUE9PTElELCBwYXJhbXM7CgogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgICAgX2V2ZW50JGFyZ3VtZW50cyRpbnB1MiA9IGV2ZW50LmFyZ3VtZW50cy5pbnB1dCwgdXNlciA9IF9ldmVudCRhcmd1bWVudHMkaW5wdTIudXNlciwgZ3JvdXAgPSBfZXZlbnQkYXJndW1lbnRzJGlucHUyLmdyb3VwOwogICAgICAgICAgICBBVVRIX0xPR0JPT0tENzM0NjY0MV9VU0VSUE9PTElEID0gcHJvY2Vzcy5lbnYuQVVUSF9MT0dCT09LRDczNDY2NDFfVVNFUlBPT0xJRDsKICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgIFVzZXJuYW1lOiB1c2VyLAogICAgICAgICAgICAgIEdyb3VwTmFtZTogZ3JvdXAsCiAgICAgICAgICAgICAgVXNlclBvb2xJZDogQVVUSF9MT0dCT09LRDczNDY2NDFfVVNFUlBPT0xJRAogICAgICAgICAgICB9OwogICAgICAgICAgICBjb25zb2xlLmxvZygnYWRkVXNlclRvR3JvdXAgcGFyYW1zOiAnLCBwYXJhbXMpOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDc7CiAgICAgICAgICAgIHJldHVybiBjb2duaXRvU1AuYWRtaW5BZGRVc2VyVG9Hcm91cChwYXJhbXMpLnByb21pc2UoKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLAogICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTA7CiAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsCiAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgICAgICAgICAgICBlcnJvcjogJ0NvdWxkIG5vdCBhZGQgdXNlciB0byBncm91cCcsCiAgICAgICAgICAgICAgICBlcnJvck1zZzogX2NvbnRleHQzLnQwCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCAxMF1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBhZGRVc2VyVG9Hcm91cChfeDMpIHsKICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTs="},null]}